AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Example of processing messages on an SQS queue with Lambda


Resources:

  eventProcessor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: eventProcessor.handler
      Runtime: python3.6
      Environment:
        Variables:
          SENSOR_DATA_TABLE: !Ref SensorDataTable
          SNS_TOPIC_HEARTRATE: !Ref SNSTopicHeartRate
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonSNSFullAccess
      Events:
        nonnoSqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSQueue.Arn
            BatchSize: 10

  checkHeartRate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: checkHeartRate.handler
      Runtime: python3.6
      Environment:
        Variables:
          USER_DATA_TABLE: !Ref UserDataTable
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonSNSFullAccess
      Events:
        freqEvent:
          Type: SNS
          Properties:
            Topic:
              Ref: SNSTopicHeartRate

  apiServer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: apiServer.handler
      Runtime: python3.6
      Environment:
        Variables:
          SENSOR_DATA_TABLE: !Ref SensorDataTable
      Policies: AmazonDynamoDBFullAccess
      Events:
        HttpPost:
          Type: Api
          Properties:
            Path: '/DynamoDBManager'
            Method: post

  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      ReceiveMessageWaitTimeSeconds: 20  # enable long polling

  SensorDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: sensor_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: sensor_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  UserDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: sensor_id
          AttributeType: S
      KeySchema:
        - AttributeName: sensor_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  SNSTopicHeartRate:
    Type: AWS::SNS::Topic
#    Properties:
#      Subscription:
#      - Endpoint: "smvfal@gmail.com"
#        Protocol: email

  ApiBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html


Outputs:
  SQSQueue:
    Description: "SQS events queue URL"
    Value: !Ref SQSQueue
  ApiGatewayUrl:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/DynamoDBManager/"
#  nonnoEventFunctionIamRole:
#    Description: "Implicit IAM Role created for event processor function"
#    Value: !GetAtt nonnoEventProcessorRole.Arn