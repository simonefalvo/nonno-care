AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: My own serverless application

Resources:
  pandasLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: PandasLayer
      Description: Layer of Pandas 0.25
      ContentUri: ./layers/my-Python36-Pandas23.zip
      CompatibleRuntimes:
        - python3.6
      LicenseInfo: ''
      RetentionPolicy: Delete

  sagemakerEndpoint:
    Type: AWS::SageMaker::Endpoint
    Properties:
      EndpointConfigName: xgboost-fall-v1
      EndpointName: fall-model-endpoint

  apiServer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: apiServer.handler
      Runtime: python3.6
      Environment:
        Variables:
          USER_DATA_TABLE: !Ref UserDataTable
          SENSOR_DATA_TABLE: !Ref SensorDataTable
          ACCIDENT_DATA_TABLE: !Ref AccidentDataTable
      Policies: AmazonDynamoDBFullAccess
      Events:
        HttpPost:
          Type: Api
          Properties:
            Path: '/DynamoDBManager'
            Method: post

  eventProcessor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: eventProcessor.handler
      Runtime: python3.6
      Environment:
        Variables:
          SENSOR_DATA_TABLE: !Ref SensorDataTable
          SNS_TOPIC_HEARTRATE: !Ref SNSTopicHeartRate
          SNS_TOPIC_POSITION: !Ref SNSTopicPosition
          SNS_TOPIC_FALL_DETECTION: !Ref SNSTopicFall
          SNS_TOPIC_SOS: !Ref SNSTopicSOS
          SNS_TOPIC_NOTIFY: !Ref SNSTopicNotify
          TTL: 604800  # seconds in a week
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonSNSFullAccess
      Timeout: 15
      Events:
        nonnoSqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt IngestionSQSQueue.Arn
            BatchSize: 10

  checkPosition:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: checkPosition.handler
      Runtime: python3.6
      Environment:
        Variables:
          USER_DATA_TABLE: !Ref UserDataTable
          SNS_TOPIC_NOTIFY: !Ref SNSTopicNotify
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonSNSFullAccess
      Timeout: 8
      Events:
        freqEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt PositionSQSQueue.Arn
            BatchSize: 10

  checkHeartRate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: checkHeartRate.handler
      Runtime: python3.6
      Environment:
        Variables:
          USER_DATA_TABLE: !Ref UserDataTable
          SNS_TOPIC_NOTIFY: !Ref SNSTopicNotify
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonSNSFullAccess
      Timeout: 8
      Events:
        checkHeartRatefreqEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt HeartRateSQSQueue.Arn
            BatchSize: 10

  checkFall:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: checkFall.handler
      Runtime: python3.6
      Environment:
        Variables:
          SNS_TOPIC_NOTIFY: !Ref SNSTopicNotify
      Layers:
        #- arn:aws:lambda:eu-west-3:959311844005:layer:AWSLambda-Python36-SciPy1x:2
        - !Sub "arn:aws:lambda:${AWS::Region}:292169987271:layer:AWSLambda-Python36-SciPy1x:2"
        - !Ref pandasLayer
      Policies:
        - AmazonSNSFullAccess
        - AmazonSageMakerFullAccess
      Events:
        freqEvent:
          Type: SNS
          Properties:
            Topic:
              Ref: SNSTopicFall

  notify:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: notify.handler
      Runtime: python3.6
      Environment:
        Variables:
          USER_DATA_TABLE: !Ref UserDataTable
          ACCIDENT_DATA_TABLE: !Ref AccidentDataTable
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonSESFullAccess
      Timeout: 15
      Events:
        freqEvent:
          Type: SNS
          Properties:
            Topic:
              Ref: SNSTopicNotify

  IngestionSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      ReceiveMessageWaitTimeSeconds: 20  # enable long polling
      VisibilityTimeout: 90  # 6 * eventProcessor Timeout

  PositionSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      ReceiveMessageWaitTimeSeconds: 20  # enable long polling
      VisibilityTimeout: 50

  HeartRateSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      ReceiveMessageWaitTimeSeconds: 20  # enable long polling
      VisibilityTimeout: 50

  FallSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      ReceiveMessageWaitTimeSeconds: 20  # enable long polling
      VisibilityTimeout: 50

  NotifySQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      ReceiveMessageWaitTimeSeconds: 20  # enable long polling
      VisibilityTimeout: 50

  PositionSendMessagePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Id: PositionSendMessagePolicy
        Statement:
          - Sid: Allow-SNS-SendMessage
            Effect: Allow
            Principal: '*'
            Action: sqs:SendMessage
            Resource:
              - !GetAtt PositionSQSQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn:
                  - !Ref SNSTopicPosition
      Queues:
        - !Ref PositionSQSQueue

  HeartRateSendMessagePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Id: HeartRateSendMessagePolicy
        Statement:
          - Sid: Allow-SNS-SendMessage
            Effect: Allow
            Principal: '*'
            Action: sqs:SendMessage
            Resource:
              - !GetAtt HeartRateSQSQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn:
                  - !Ref SNSTopicHeartRate
      Queues:
        - !Ref HeartRateSQSQueue

  UserDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: sensor_id
          AttributeType: S
      KeySchema:
        - AttributeName: sensor_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST  # on-demand r/w throughput

  SensorDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: sensor_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: sensor_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: exp_date
        Enabled: true
      BillingMode: PAY_PER_REQUEST  # on-demand r/w throughput

  AccidentDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: sensor_id
          AttributeType: S
        - AttributeName: typestamp
          AttributeType: S
      KeySchema:
        - AttributeName: sensor_id
          KeyType: HASH
        - AttributeName: typestamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  SNSTopicHeartRate:
    Type: AWS::SNS::Topic

  SNSTopicPosition:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !GetAtt PositionSQSQueue.Arn
          Protocol: sqs

  SNSTopicFall:
    Type: AWS::SNS::Topic

  SNSTopicSOS:
    Type: AWS::SNS::Topic

  SNSTopicNotify:
    Type: AWS::SNS::Topic

  HeartRateSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Ref SNSTopicHeartRate
      Endpoint: !GetAtt HeartRateSQSQueue.Arn
      Protocol: sqs
      RawMessageDelivery: 'true'

  ApiBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html


Outputs:
  IngestionSQSQueue:
    Description: "SQS events ingestion queue URL"
    Value: !Ref IngestionSQSQueue
  UserDataTable:
    Description: "DynamoDB UserDataTable name"
    Value: !Ref UserDataTable
  ApiGatewayUrl:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/DynamoDBManager/"
